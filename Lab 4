//TROY COGNIGNI AND WILLIAM TRUEX
//LAB 4 Embedded Systems Section 3

//Q1
//WDT timer interrupt process: Toggle your Red LED with a 1sec interval.

#include <msp430.h> 
int main(void)
{
    WDTCTL = WDT_ADLY_250;                      // WDT 250ms, SMCLK, interval timer
    P6OUT &= ~BIT6;                             // Assign GPIO (Pin 6.6) for green LED
    P6DIR |= BIT6;
    PM5CTL0 &= ~LOCKLPM5;
    SFRIE1 |= WDTIE;
    _enable_interrupts();
    while (1);
    }
    #pragma vector=WDT_VECTOR
    __interrupt void wdtled(void)
    {
            P6OUT^=BIT6;
    }
    
//Q2
//PWM using interrupt: (duty cycle 10%, flashes the LED every 500 ms)
#include <msp430.h>
void main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer
    PM5CTL0 &= ~LOCKLPM5;
    P1DIR |= BIT0;              // P1.0  output
    //PWM Generator
    TB0CCR0 = 32768/2;          //Set period to 500 ms (Divide 32768 by 2)
    TB0CCTL1 = OUTMOD_7;
    TB0CCR1 = TB0CCR0*.1;       //Set duty cycle to 10% (Multiply period by 0.1)
    TB0CTL = TBSSEL_1 + MC_1 + TBCLR;
    TB0CCTL0 |= CCIE;
    TB0CCTL1 |= CCIE;
    TB0CCTL0 &=~CCIFG;
    TB0CCTL1 &=~CCIFG;
    _enable_interrupts();
}
#pragma vector = TIMER0_B0_VECTOR       //define the interrupt service vector
__interrupt void ISR_TB0_CCR0 (void)    // interrupt service routine
    {
    P1OUT |=BIT0;
    TB0CCTL0 &=~CCIFG;
    }
#pragma vector = TIMER0_B1_VECTOR
__interrupt void ISR_TB0_CCR1  (void) {
    P1OUT &=~BIT0;
    TB0CCTL1 &=~CCIFG;
    }
    
//Q3
//PWM using interrupt: (duty cycle 20%, period 250ms)
#include <msp430.h>
void main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer
    PM5CTL0 &= ~LOCKLPM5;
    P1DIR |= BIT0;              // P1.0  output
    //PWM Generator
    TB0CCR0 = 32768/4;          // Set period to 250 ms (Divide 32768 by 4)
    TB0CCTL1 = OUTMOD_7;        
    TB0CCR1 = TB0CCR0*.2;       // Set duty cycle to 20% (Multiply TB0CCR0 by 0.2)
    TB0CTL = TBSSEL_1 + MC_1 + TBCLR;
    TB0CCTL0 |= CCIE;
    TB0CCTL1 |= CCIE;
    TB0CCTL0 &=~CCIFG;
    TB0CCTL1 &=~CCIFG;
    _enable_interrupts();
}
#pragma vector = TIMER0_B0_VECTOR       //define the interrupt service vector
__interrupt void ISR_TB0_CCR0 (void)    // interrupt service routine
    {
    P1OUT |=BIT0;
    TB0CCTL0 &=~CCIFG;
    }
#pragma vector = TIMER0_B1_VECTOR
__interrupt void ISR_TB0_CCR1  (void) {
    P1OUT &=~BIT0;
    TB0CCTL1 &=~CCIFG;
    }

